name: production

on:
  push:
    branches:
      - production

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: 🔑 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: 💾 Build and push image
        uses: docker/build-push-action@v5
        with:
          push: true
          file: Dockerfile
          tags: bnussman/api:production
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://ridebeep.app
    steps:
      - name: 📃 Import kube config
        run: |
          mkdir -p $HOME/.kube/
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - name: 📦 Install helm
        run: |
          curl -LO https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz
          tar -zxvf helm-v3.8.0-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm
          helm version
      - uses: actions/checkout@v4
      - name: 🔍 Lint helm charts
        run: helm lint ./.github/helm/ -f ./.github/helm/values-production.yaml
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: 🔐 Inject Secrets
        run: bun run .github/helm/inject.js
        env:
          secrets: ${{ toJSON(secrets) }}
      - name: 🚀 Deploy api
        run: |
          helm upgrade --install --atomic --timeout 5m api ./.github/helm/ -f ./.github/helm/values-production.yaml --namespace beep --create-namespace
  publish:
     runs-on: ubuntu-latest
     steps:
       - name: 🏗 Setup repo
         uses: actions/checkout@v4

       - name: 🏗 Setup Node
         uses: actions/setup-node@v4
         with:
           node-version: 18.x

       - name: 🏗 Setup EAS
         uses: expo/expo-github-action@v8
         with:
           eas-version: latest
           token: ${{ secrets.EXPO_TOKEN }}
       - uses: pnpm/action-setup@v3
         name: Install pnpm
         id: pnpm-install
         with:
           version: latest
           run_install: false
       - name: Get pnpm store directory
         id: pnpm-cache
         shell: bash
         run: |
           echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
       - uses: actions/cache@v4
         name: Setup pnpm cache
         with:
           path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
           key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
           restore-keys: |
             ${{ runner.os }}-pnpm-store-
       - run: pnpm i --frozen-lockfile
       - name: 🚀 Publish app
         run: eas update --auto
         working-directory: ./app
